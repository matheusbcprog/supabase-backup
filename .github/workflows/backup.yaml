name: supabase-backup
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight

env:
  BACKUP_ENABLED: true

jobs:
  run_db_backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      BACKUP_ENABLED: ${{ vars.BACKUP_ENABLED || 'true' }} # Repository variable (true or false)
    
    steps:
      - name: Check if backups are enabled
        run: |
          if [ "$BACKUP_ENABLED" != "true" ]; then
            echo "Backups are disabled. Exiting workflow."
            exit 0
          fi
          
      - name: Checkout repository
        if: env.BACKUP_ENABLED == 'true'
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        if: env.BACKUP_ENABLED == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Create backup directory
        if: env.BACKUP_ENABLED == 'true'
        run: mkdir -p prisma/backups
        
      - name: Generate timestamp
        if: env.BACKUP_ENABLED == 'true'
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
        
      - name: Backup roles
        if: env.BACKUP_ENABLED == 'true'
        run: |
          supabase db dump --db-url "$SUPABASE_DB_URL" \
            -f prisma/backups/roles_${{ steps.timestamp.outputs.TIMESTAMP }}.sql \
            --role-only
            
      - name: Backup schema
        if: env.BACKUP_ENABLED == 'true'
        run: |
          supabase db dump --db-url "$SUPABASE_DB_URL" \
            -f prisma/backups/schema_${{ steps.timestamp.outputs.TIMESTAMP }}.sql \
            --schema-only
            
      - name: Backup data
        if: env.BACKUP_ENABLED == 'true'
        run: |
          supabase db dump --db-url "$SUPABASE_DB_URL" \
            -f prisma/backups/data_${{ steps.timestamp.outputs.TIMESTAMP }}.sql \
            --data-only --use-copy
            
      - name: Create backup summary
        if: env.BACKUP_ENABLED == 'true'
        run: |
          echo "# Backup Summary - ${{ steps.timestamp.outputs.TIMESTAMP }}" > prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          echo "- **Date:** $(date)" >> prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          echo "- **Roles backup:** roles_${{ steps.timestamp.outputs.TIMESTAMP }}.sql" >> prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          echo "- **Schema backup:** schema_${{ steps.timestamp.outputs.TIMESTAMP }}.sql" >> prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          echo "- **Data backup:** data_${{ steps.timestamp.outputs.TIMESTAMP }}.sql" >> prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          echo "- **Workflow:** ${{ github.workflow }}" >> prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          echo "- **Run ID:** ${{ github.run_id }}" >> prisma/backups/backup_summary_${{ steps.timestamp.outputs.TIMESTAMP }}.md
          
      - name: Commit backups
        if: env.BACKUP_ENABLED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat: Supabase backup - ${{ steps.timestamp.outputs.TIMESTAMP }}"
          file_pattern: prisma/backups/*
          
      - name: Clean old backups (keep last 7 days)
        if: env.BACKUP_ENABLED == 'true'
        run: |
          find prisma/backups -name "*.sql" -type f -mtime +7 -delete || true
          find prisma/backups -name "*.md" -type f -mtime +7 -delete || true
          
      - name: Commit cleanup
        if: env.BACKUP_ENABLED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: cleanup old backups"
          file_pattern: prisma/backups/*
